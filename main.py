import asyncio
import logging
from collections import defaultdict
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import (
    Message, InputMediaPhoto,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.client.default import DefaultBotProperties

API_TOKEN = '8157495833:AAEe3kl34YIZ0hE2YancGubq-kJ5OdymlLQ'
ADMINS = [6705001934]

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
user_data = {}
user_locks = defaultdict(asyncio.Lock)

async def clear_messages(uid, message_ids):
    for mid in message_ids:
        try:
            await bot.delete_message(uid, mid)
        except:
            continue

@dp.message(CommandStart())
@dp.message(F.text == "‚ûï –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –≥—Ä—É–ø–ø—É")
async def start(message: Message):
    uid = message.from_user.id
    async with user_locks[uid]:
        user_data[uid] = {
            "stage": "choose_branch",
            "msg_ids_to_delete": []
        }
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üè¢ –¢–∞—à–∫–µ–Ω—Ç"), KeyboardButton(text="üè¢ –°–∞–º–∞—Ä–∫–∞–Ω–¥")],
                [KeyboardButton(text="üè¢ –°–∞–π—Ä–∞–º")]
            ],
            resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:", reply_markup=kb)

@dp.message(F.text.startswith("üè¢"))
async def choose_branch(message: Message):
    uid = message.from_user.id
    async with user_locks[uid]:
        branch = message.text.replace("üè¢ ", "")
        user_data[uid] = {
            "branch": branch,
            "stage": "choose_category",
            "msg_ids_to_delete": []
        }
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="ü©∫ –õ–µ—á–µ–Ω–∏–µ"), KeyboardButton(text="üéì –û–±—É—á–µ–Ω–∏–µ")]],
            resize_keyboard=True
        )
        await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–∏–ª–∏–∞–ª: {branch}")
        await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)

@dp.message(F.text.in_(["ü©∫ –õ–µ—á–µ–Ω–∏–µ", "üéì –û–±—É—á–µ–Ω–∏–µ"]))
async def choose_category(message: Message):
    uid = message.from_user.id
    async with user_locks[uid]:
        category = "–ª–µ—á–µ–Ω–∏–µ" if "–õ–µ—á–µ–Ω–∏–µ" in message.text else "–æ–±—É—á–µ–Ω–∏–µ"
        user_data[uid].update({
            "category": category,
            "stage": "collecting",
            "step": 0,
            "videos": [],
            "video_texts": [],
            "photos": [],
            "photo_texts": [],
            "photo_types": [],
            "msg_ids_to_delete": []
        })
        await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}")
        sent = await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ 3 –≤–∏–¥–µ–æ –ø–æ –æ—á–µ—Ä–µ–¥–∏.", reply_markup=ReplyKeyboardRemove())
        user_data[uid]["msg_ids_to_delete"].append(sent.message_id)

@dp.message(F.video)
async def handle_video(message: Message):
    await process_video(message, message.video.file_id)

@dp.message(F.document)
async def handle_document(message: Message):
    uid = message.from_user.id
    mime = message.document.mime_type
    if mime.startswith("video/"):
        await process_video(message, message.document.file_id)
    elif mime.startswith("image/"):
        await process_photo(message, message.document.file_id, file_type="document")

async def process_video(message: Message, file_id: str):
    uid = message.from_user.id
    async with user_locks[uid]:
        data = user_data.get(uid)
        if not data or data["stage"] != "collecting":
            return
        step = data["step"]
        await clear_messages(uid, data["msg_ids_to_delete"])
        data["msg_ids_to_delete"].clear()
        if 0 <= step <= 2:
            data["videos"].append(file_id)
            data["step"] += 1
            if data["step"] == 3:
                sent = await message.answer("‚úÖ –í—Å–µ 3 –≤–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 3 –ø–æ–¥–ø–∏—Å–∏ –∫ –Ω–∏–º.")
            else:
                sent = await message.answer(f"‚úÖ –í–∏–¥–µ–æ {len(data['videos'])} –ø–æ–ª—É—á–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ.")
            data["msg_ids_to_delete"].append(sent.message_id)
        else:
            sent = await message.answer("‚ùå –°–µ–π—á–∞—Å –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç, –∞ –Ω–µ –≤–∏–¥–µ–æ.")
            data["msg_ids_to_delete"].append(sent.message_id)

@dp.message(F.text)
async def handle_text(message: Message):
    uid = message.from_user.id
    async with user_locks[uid]:
        data = user_data.get(uid)
        if not data or data["stage"] != "collecting":
            return
        step = data["step"]
        await clear_messages(uid, data["msg_ids_to_delete"])
        data["msg_ids_to_delete"].clear()
        if 3 <= step <= 5:
            data["video_texts"].append(message.text)
            data["step"] += 1
            if data["step"] == 6:
                sent = await message.answer("‚úÖ –í—Å–µ –ø–æ–¥–ø–∏—Å–∏ –∫ –≤–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 3 —Ñ–æ—Ç–æ.")
            else:
                sent = await message.answer(f"üìù –ü–æ–¥–ø–∏—Å—å {len(data['video_texts'])}/3 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
            data["msg_ids_to_delete"].append(sent.message_id)
        elif step == 9:
            data["photo_texts"].append(message.text)
            data["step"] += 1
            sent = await message.answer("‚úÖ –ü–æ–¥–ø–∏—Å—å –∫ –ø–µ—Ä–≤—ã–º 3 —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë 3 —Ñ–æ—Ç–æ.")
            data["msg_ids_to_delete"].append(sent.message_id)
        elif step == 13:
            data["photo_texts"].append(message.text)
            data["step"] += 1
            await message.answer("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—ë –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º...")
            await send_to_admins(uid, data)
            user_data.pop(uid, None)
        else:
            sent = await message.answer("‚ùå –°–µ–π—á–∞—Å —Ç–µ–∫—Å—Ç –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è.")
            data["msg_ids_to_delete"].append(sent.message_id)

@dp.message(F.photo)
async def handle_photo(message: Message):
    await process_photo(message, message.photo[-1].file_id, file_type="photo")

async def process_photo(message: Message, file_id: str, file_type="photo"):
    uid = message.from_user.id
    async with user_locks[uid]:
        data = user_data.get(uid)
        if not data or data["stage"] != "collecting":
            return
        step = data["step"]
        await clear_messages(uid, data["msg_ids_to_delete"])
        data["msg_ids_to_delete"].clear()
        if 6 <= step <= 8 or 10 <= step <= 12:
            data["photos"].append(file_id)
            data["photo_types"].append(file_type)
            data["step"] += 1
            if data["step"] == 9:
                sent = await message.answer("üñºÔ∏è –ü–æ–ª—É—á–µ–Ω—ã 3 —Ñ–æ—Ç–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ –Ω–∏–º.")
            elif data["step"] == 13:
                sent = await message.answer("üñºÔ∏è –ü–æ–ª—É—á–µ–Ω—ã –µ—â—ë 3 —Ñ–æ—Ç–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫–æ –≤—Ç–æ—Ä–æ–π –≥—Ä—É–ø–ø–µ.")
            else:
                sent = await message.answer(f"üñºÔ∏è –§–æ—Ç–æ {len(data['photos'])}/6 –ø—Ä–∏–Ω—è—Ç–æ.")
            data["msg_ids_to_delete"].append(sent.message_id)
        else:
            sent = await message.answer("‚ùå –°–µ–π—á–∞—Å —Ñ–æ—Ç–æ –Ω–µ –æ–∂–∏–¥–∞—é—Ç—Å—è.")
            data["msg_ids_to_delete"].append(sent.message_id)

async def send_to_admins(uid, data):
    header = f"üìç –§–∏–ª–∏–∞–ª: {data['branch']}\nüß≠ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}"
    for admin in ADMINS:
        await bot.send_message(admin, header)
        for i in range(3):
            await bot.send_video(admin, video=data["videos"][i], caption=data["video_texts"][i])
        for i in range(2):
            start = i * 3
            group = data["photos"][start:start+3]
            if all(t == "photo" for t in data["photo_types"][start:start+3]):
                media_group = [InputMediaPhoto(media=g) for g in group]
                await bot.send_media_group(admin, media=media_group)
            else:
                for file_id in group:
                    await bot.send_document(admin, document=file_id)
            await bot.send_message(admin, f"üìù –ü–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ: {data['photo_texts'][i]}")
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ûï –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –≥—Ä—É–ø–ø—É")]],
        resize_keyboard=True
    )
    await bot.send_message(uid, "‚úÖ –í—Å—ë —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –°–ø–∞—Å–∏–±–æ üôè", reply_markup=kb)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
